{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#netbox-napalm-plugin","title":"NetBox Napalm Plugin","text":"<p>NetBox plugin for Napalm.</p> <ul> <li>Free software: Apache-2.0</li> <li>Documentation: https://netbox-community.github.io/netbox-napalm-plugin/.</li> </ul>"},{"location":"#features","title":"Features","text":"<p>The features the plugin provides should be listed here.</p>"},{"location":"#compatibility","title":"Compatibility","text":"NetBox Version Plugin Version 3.5 0.1.0 3.5.8 0.1.4 3.6.0 0.1.5 3.7.6 0.1.7 &lt; 4.0.11 0.2.1 &gt;= 4.1.0 &lt; 4.2.0 0.3.0 &gt;= 4.1.0 0.3.1"},{"location":"#installation","title":"Installation","text":"<p>For adding to a NetBox Docker setup see the general instructions for using netbox-docker with plugins.</p> <pre><code>$ source /opt/netbox/venv/bin/activate\n(venv) pip install netbox-napalm-plugin\n</code></pre> <p>or by adding to your <code>local_requirements.txt</code> or <code>plugin_requirements.txt</code> (netbox-docker):</p> <pre><code>(venv) netbox-napalm-plugin\n</code></pre>"},{"location":"#enable-the-plugin","title":"Enable the Plugin","text":"<p>Enable the plugin in <code>/opt/netbox/netbox/netbox/configuration.py</code>,  or if you use netbox-docker, your <code>/configuration/plugins.py</code> file :</p> <pre><code>PLUGINS = [\n    'netbox_napalm_plugin'\n]\n</code></pre>"},{"location":"#configure-plugin","title":"Configure Plugin","text":"<p>Configure the plugin in <code>configuration.py</code> under the <code>PLUGINS_CONFIG</code> parameter.</p> <pre><code>PLUGINS_CONFIG = {\n    'netbox_napalm_plugin': {\n        'NAPALM_USERNAME': 'xxx',\n        'NAPALM_PASSWORD': 'yyy',\n    },\n}\n</code></pre>"},{"location":"#run-database-migrations","title":"Run Database Migrations","text":"<p>Run the provided schema migrations:</p> <pre><code>(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py migrate\n</code></pre>"},{"location":"#collect-static-files","title":"Collect Static Files","text":"<p>Ensure the static files are copied to the static root directory with the <code>collectstatic</code> management command:</p> <pre><code>(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py collectstatic\n</code></pre>"},{"location":"#restart-wsgi-service","title":"Restart WSGI Service","text":"<p>Restart the WSGI service to load the new plugin:</p> <pre><code># sudo systemctl restart netbox\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>Based on the NetBox plugin tutorial:</p> <ul> <li>demo repository</li> <li>tutorial</li> </ul> <p>This package was created with Cookiecutter and the <code>netbox-community/cookiecutter-netbox-plugin</code> project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#020-2024-05-06","title":"0.2.0 (2024-05-06)","text":"<ul> <li>For NetBox 4.0</li> </ul>"},{"location":"changelog/#019-2024-04-29","title":"0.1.9 (2024-04-29)","text":"<ul> <li>Fix js in distro</li> </ul>"},{"location":"changelog/#018-2024-04-16","title":"0.1.8 (2024-04-16)","text":"<ul> <li>Refactorings for pypi deployment</li> </ul>"},{"location":"changelog/#017-2024-01-02","title":"0.1.7 (2024-01-02)","text":"<ul> <li>Update for NetBox 3.7</li> </ul>"},{"location":"changelog/#016-2023-09-08","title":"0.1.6 (2023-09-08)","text":"<ul> <li>Fix migrations NetBox 3.6.0</li> </ul>"},{"location":"changelog/#015-2023-09-08","title":"0.1.5 (2023-09-08)","text":"<ul> <li>Fix for NetBox 3.6.0</li> </ul>"},{"location":"changelog/#014-2023-08-18","title":"0.1.4 (2023-08-18)","text":"<ul> <li>Fix for NetBox 3.5.8</li> </ul>"},{"location":"changelog/#013-2023-01-27","title":"0.1.3 (2023-01-27)","text":"<ul> <li>Add missing js files to static for non upgrade installations</li> </ul>"},{"location":"changelog/#012-2023-05-03","title":"0.1.2 (2023-05-03)","text":"<ul> <li>Add missing js files to static for non upgrade installations</li> </ul>"},{"location":"changelog/#011-2023-04-28","title":"0.1.1 (2023-04-28)","text":"<ul> <li>Updates to final NetBox 3.5, readme cleanup.</li> </ul>"},{"location":"changelog/#010-2023-01-27","title":"0.1.0 (2023-01-27)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#napalm-parameters","title":"NAPALM Parameters","text":""},{"location":"configuration/#napalm_username","title":"NAPALM_USERNAME","text":""},{"location":"configuration/#napalm_password","title":"NAPALM_PASSWORD","text":"<p>Dynamic Configuration Parameter</p> <p>NetBox will use these credentials when authenticating to remote devices via the supported NAPALM integration, if installed. Both parameters are optional.</p> <p>Note</p> <p>If SSH public key authentication has been set up on the remote device(s) for the system account under which NetBox runs, these parameters are not needed.</p>"},{"location":"configuration/#napalm_args","title":"NAPALM_ARGS","text":"<p>Dynamic Configuration Parameter</p> <p>A dictionary of optional arguments to pass to NAPALM when instantiating a network driver. See the NAPALM documentation for a complete list of optional arguments. An example:</p> <pre><code>PLUGINS_CONFIG = {\n    'netbox_napalm_plugin': {\n        'NAPALM_ARGS': {\n            'api_key': '472071a93b60a1bd1fafb401d9f8ef41',\n            'port': 2222,\n        }\n    },\n}\n</code></pre> <p>Some platforms (e.g. Cisco IOS) require an argument named <code>secret</code> to be passed in addition to the normal password. If desired, you can use the configured <code>NAPALM_PASSWORD</code> as the value for this argument:</p> <pre><code>PLUGINS_CONFIG = {\n    'netbox_napalm_plugin': {\n        'NAPALM_USERNAME': 'username',\n        'NAPALM_PASSWORD': 'MySecretPassword',\n        'NAPALM_ARGS': {\n            'secret': NAPALM_PASSWORD,\n            # Include any additional args here\n        }\n    },\n}\n</code></pre>"},{"location":"configuration/#napalm_timeout","title":"NAPALM_TIMEOUT","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 30 seconds</p> <p>The amount of time (in seconds) to wait for NAPALM to connect to a device.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/netbox-community/netbox-napalm-plugin/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>NetBox Napalm Plugin could always use more documentation, whether as part of the official NetBox Napalm Plugin docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/netbox-community/netbox-napalm-plugin/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>netbox-napalm-plugin</code> for local development.</p> <ol> <li>Fork the <code>netbox-napalm-plugin</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/netbox-napalm-plugin.git\n</code></pre> </li> <li> <p>Activate the NetBox virtual environment (see the NetBox documentation under Setting up a Development Environment):</p> <pre><code>$ source ~/.venv/netbox/bin/activate\n</code></pre> </li> <li> <p>Add the plugin to NetBox virtual environment in Develop mode (see Plugins Development):</p> <p>To ease development, it is recommended to go ahead and install the plugin at this point using setuptools' develop mode. This will create symbolic links within your Python environment to the plugin development directory. Call setup.py from the plugin's root directory with the develop argument (instead of install):</p> <pre><code>$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.8, 3.9, 3.10 and 3.11. Check    https://github.com/netbox-community/netbox-napalm-plugin/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md) and that all tests pass. Then in the github project go to <code>Releases</code> and create a new release with a new tag.  This will automatically upload the release to pypi:</p>"},{"location":"integration/","title":"Integration","text":""},{"location":"integration/#napalm","title":"NAPALM","text":"<p>NetBox NAPALM plugin supports integration with the NAPALM automation library. NAPALM allows NetBox to serve a proxy for operational data, fetching live data from network devices and returning it to a requester via its REST API. Note that NetBox does not store any NAPALM data locally.</p> <p>The NetBox UI will display tabs for status, LLDP neighbors, and configuration under the device view if the following conditions are met:</p> <ul> <li>Device status is \"Active\"</li> <li>A primary IP has been assigned to the device</li> <li>A platform with a NAPALM driver has been assigned</li> <li>The authenticated user has the <code>dcim.napalm_read_device</code> permission</li> </ul> <p>Below is an example REST API request and response:</p> <pre><code>GET /api/plugins/netbox_napalm_plugin/napalmplatformconfig/1/napalm/?method=get_environment\n\n{\n    \"get_environment\": {\n        ...\n    }\n}\n</code></pre> <p>Note</p> <p>To make NAPALM requests via the NetBox REST API, a NetBox user must have assigned a permission granting the <code>napalm_read</code> action for the device object type.</p>"},{"location":"integration/#authentication","title":"Authentication","text":"<p>By default, the <code>NAPALM_USERNAME</code> and <code>NAPALM_PASSWORD</code> configuration parameters are used for NAPALM authentication. They can be overridden for an individual API call by specifying the <code>X-NAPALM-Username</code> and <code>X-NAPALM-Password</code> headers.</p> <pre><code>$ curl \"http://localhost/api/plugins/netbox_napalm_plugin/napalmplatformconfig/1/napalm/?method=get_environment\" \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-H \"X-NAPALM-Username: foo\" \\\n-H \"X-NAPALM-Password: bar\"\n</code></pre>"},{"location":"integration/#method-support","title":"Method Support","text":"<p>The list of supported NAPALM methods depends on the NAPALM driver configured for the platform of a device. Because there is no granular mechanism in place for limiting potentially disruptive requests, NetBox supports only read-only get methods.</p>"},{"location":"integration/#multiple-methods","title":"Multiple Methods","text":"<p>It is possible to request the output of multiple NAPALM methods in a single API request by passing multiple <code>method</code> parameters. For example:</p> <pre><code>GET /api/plugins/netbox_napalm_plugin/napalmplatformconfig/1/napalm/?method=get_ntp_servers&amp;method=get_ntp_peers\n\n{\n    \"get_ntp_servers\": {\n        ...\n    },\n    \"get_ntp_peers\": {\n        ...\n    }\n}\n</code></pre>"},{"location":"integration/#optional-arguments","title":"Optional Arguments","text":"<p>The behavior of NAPALM drivers can be adjusted according to the optional arguments. NetBox exposes those arguments using headers prefixed with <code>X-NAPALM-</code>. For example, the SSH port is changed to 2222 in this API call:</p> <pre><code>$ curl \"http://localhost/api/plugins/netbox_napalm_plugin/napalmplatformconfig/1/napalm/?method=get_environment\" \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-H \"X-NAPALM-port: 2222\"\n</code></pre>"}]}